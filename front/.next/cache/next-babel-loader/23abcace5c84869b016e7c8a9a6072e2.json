{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data); // yield가 await같은 역할을한다\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAIULER',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI); // yield가 await같은 역할을한다\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAIULER',\n      data: err.response.data\n    });\n  }\n} //takeEvery : 마우스가 두번누렀으면 두번실행되고,\n//takeLatest : 마우스가 두번눌렀을때, 마지막꺼만 실행해준다.\n\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); // LOG_IN이라는 action이 들어오면 logIn 제네레이터 함수를 실행시켜라\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/simjieun/react연습/inflearn/react-nodebird/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","result","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOK,GAAP,EAAW;AACT,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACG,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAES,MAAM,CAACT;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOK,GAAP,EAAW;AACT,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;;;AACA,UAAUU,UAAV,GAAsB;AAClB,QAAMb,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB,CADkB,CACyB;AAC9C;;AAED,UAAUS,WAAV,GAAuB;AACnB,QAAMd,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACH;;AAGD,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMnB,GAAG,CAAC,CACNE,IAAI,CAACe,UAAD,CADE,EAENf,IAAI,CAACgB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, delay, fork, put, takeLatest} from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data); // yield가 await같은 역할을한다\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type: 'LOG_IN_FAIULER',\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI); // yield가 await같은 역할을한다\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAIULER',\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n//takeEvery : 마우스가 두번누렀으면 두번실행되고,\r\n//takeLatest : 마우스가 두번눌렀을때, 마지막꺼만 실행해준다.\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn); // LOG_IN이라는 action이 들어오면 logIn 제네레이터 함수를 실행시켜라\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}